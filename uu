void Com_Init( const ComConfig_type* config)
{
	/* Initialize ComConfig */
	ComConfig = config;
	const ComSignal_type *Signal;
	const ComGroupSignal_Type *GroupSignal;

	//1- loop on IPDUs
	uint16 pduId;
	for ( pduId = 0; pduId<COM_NUM_OF_IPDU; pduId++) {

		// 1.1- Initialize I-PDU
		const ComIPdu_type *IPdu = GET_IPdu(pduId);
		Com_Asu_IPdu_type *Asu_IPdu = GET_AsuIPdu(pduId);

		Asu_IPdu->Com_Asu_TxIPduTimers.ComTxModeRepetitionPeriodTimer = \
						IPdu->ComTxIPdu.ComTxModeFalse.ComTxMode.ComTxModeRepetitionPeriod;

		Asu_IPdu->Com_Asu_TxIPduTimers.ComTxModeTimePeriodTimer = \
								IPdu->ComTxIPdu.ComTxModeFalse.ComTxMode.ComTxModeTimePeriod;

		Asu_IPdu->Com_Asu_Pdu_changed = FALSE;

		Asu_IPdu->Com_Asu_First_Repetition = TRUE;


		// Initialize the memory with the default value.
		if (IPdu->ComIPduDirection == SEND) {
			memset((void *)IPdu->ComIPduDataPtr, IPdu->ComTxIPdu.ComTxIPduUnusedAreasDefault, IPdu->ComIPduSize);
		}

		// For each signal in this PDU
		uint16 signalId;
		for ( signalId = 0; (IPdu->ComIPduSignalRef != NULL) && \
								(IPdu->ComIPduSignalRef[signalId] != NULL); signalId++)
		{
			Signal = IPdu->ComIPduSignalRef[signalId];

			// Clear update bits
			CLEARBIT(IPdu->ComIPduDataPtr, Signal->ComUpdateBitPosition);



	        // If this signal is a signal group
	        if(!GET_SIGNAL_TYPE(signalId)){
	            ComSignalGroup_Type *signalGroup=IPdu->ComIPduSignalGroupRef[pduId];
	            Com_Asu_SignalGroup_type *AsuSignalGroup=GET_ASUSIGNALGROUP(signalGroup->ComHandleId);

	            // Set pointer to shadow buffer
	            AsuSignalGroup->Com_Asu_ShadowBuffer=(void*)signalGroup->Com_Asu_ShadowBuffer;

	            // For each group signal of this signal group.
	            uint8 groupSignalId;
	            for(groupSignalId=0;(signalGroup->ComGroupSignal!=Null && signalGroup->ComGroupSignal[groupSignalId]!=NULL);groupSignalId++)
	            {
	                GroupSignal=signalGroup->ComGroupSignal[groupSignalId];
	                //update group initial value to the shadow buffer
	                Com_WriteSignalDataToShadowBuffer(GroupSignal->ComSignalGroupId,GroupSignal->ComHandleId, GroupSignal->ComSignalInitValue)

	            }
	        }
		}



	}
}